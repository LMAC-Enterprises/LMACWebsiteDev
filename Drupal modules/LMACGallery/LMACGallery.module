<?php
/**
 * @file
 * Controls the LMAC gallery.
 * @author
 * QuantumG
 */

const TRUNCATE_DOTS = '...';
const MAX_IMAGE_TITLE_LENGTH = 36;
const ALL_IMAGES_QUERY_STRING = 'all-images';
const MAX_IMAGES_PER_PAGE = 29;

/**
 * Implements hook_menu()
 */
function LMACGallery_menu() {
    $items = array();
	$items['lil-gallery'] = array(
		'title'             =>  t('Gallery'),
		'description'       =>  t('Show the images of the LMAC Image Gallery'),
		'page callback' 	=> 'LMACGallery_page',
		'access callback'   =>  true,
	);	
	$items['lil-gallery/%'] = array(
		'page callback' 	=> 'LMACGallery_page',
		'page arguments' 	=> array(1),
		'access callback'   =>  true,
	);
	$items['lmac_gallery'] = array(
		'page callback' => 'LMACGallery_page',
		'access callback'   =>  true,
	);	
	$items['lmac_gallery/%'] = array(
		'page callback' 	=> 'LMACGallery_page',
		'page arguments' 	=> array(1),
		'access callback'   =>  true,
	);
	$items['lil-gallery-image/%'] = array(
		'page callback' 	=> 'LMACGallery_imagePage',
		'page arguments' 	=> array(1),
		'access callback'   =>  true,
	);	
	$items['lmac_gallery-image/%'] = array(
		'page callback' 	=> 'LMACGallery_imagePage',
		'page arguments' 	=> array(1),
		'access callback'   =>  true,
	);	
	$items['admin/lmac/config'] = array(
		'title' 			=> t('Configure LMAC Gallery'),
		'description'       => t('Configure the behaviour of the gallery page and block image urls from being listed there.'), 
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('LMACGallery_admin_configuration_form'),
		'access arguments' 	=> array('administer lmac_gallery'),
		'file' 				=> 'LMACGallery.admin.inc',
 
	);
	$items['admin/lmac/lmacg-curation'] = array(
		'title' 			=> t('Curation Post Helper'),
		'description'       => t('Create Hive posts with hand picked images.'), 
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('LMACGallery_admin_curation_form'),
		'access arguments' 	=> array('administer lmac_gallery'),
		'file' 				=> 'LMACGallery.curation.inc',
	);
	$items['admin/lmac/lmacg-unrated'] = array(
		'title' 			=> t('Still unrated images'),
		'description'       => t('Shows a table with all unrated images.'), 
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('LMACGallery_admin_unrated_form'),
		'access arguments' 	=> array('administer lmac_gallery'),
		'file' 				=> 'LMACGallery.unrated.inc',
	);
	$items['admin/lmac/lmacg-edit-image'] = array(
		'title' 			=> t('New image'),
		'description'       => t('Add a new image manually to the LIL.'), 
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('LMACGallery_admin_addImage_form'),
		'access arguments' 	=> array('administer lmac_gallery'),
		'file' 				=> 'LMACGallery.editimage.inc',
	);
	$items['admin/lmac/lmacg-edit-image/%'] = array(
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('LMACGallery_admin_addImage_form', 3),
		'access arguments' 	=> array('administer lmac_gallery'),
		'file' 				=> 'LMACGallery.editimage.inc'
	);
	$items['admin/lmac/lmacg-curation/preview_markdown'] = array(
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('LMACGallery_previewMarkdown_form'),
		'access arguments' 	=> array('administer lmac_gallery'),
		'file' 				=> 'LMACGallery.curation.inc'
	);
	$items['ajax/lmac_gallery/%/%/%'] = array(
		'page callback' 	=> 'LMACGallery_ajax_fiveStarCallback',
		'page arguments' 	=> array(2, 3, 4),
		'access arguments' 	=> array('administer lmac_gallery'),
		'file' 				=> 'LMACGallery.ajax.inc',
	);
	$items['ajax/lmac_gallery-curate/%'] = array(
		'page callback' 	=> 'LMACGallery_ajax_curationPickCallback',
		'page arguments' 	=> array(2),
		'access arguments' 	=> array('administer lmac_gallery'),
		'file' 				=> 'LMACGallery.ajax.inc',
	);
     return $items;
}

/**
 * Implements hook_permission().
 */
function LMACGallery_permission() {
  return array(
    'administer lmac_gallery' => array(
      'title' => t('Administer LMAC Gallery'),
    ),
    'delete lmac_gallery ratings' => array(
      'title' => t('Delete LMAC Gallery ratings'),
    ),
  );
}

/**
 * Implements hook_theme()
 */
function LMACGallery_theme() {
 
	$themes = array();
	$themes['gallery_page'] = array(
		'template' => 'gallery-page',
		'path' => drupal_get_path('module', 'LMACGallery'),
	);
	$themes['gallery_image_page'] = array(
		'template' => 'gallery-image-page',
		'path' => drupal_get_path('module', 'LMACGallery'),
	);
    return $themes;
}

/**
 * Implements hook_schema().
 */
function LMACGallery_schema() {
	
	$schema['lmacg_ratings'] = array(
		'description' => 'Table to keep rating for a node',
 
		'fields' => array(
			'ratingid' => array(
				'description' => 'The primary identifier for a rating.',
				'type' => 'serial',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'imageid' => array(
				'description' => 'The foreign key for an image.',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
				'score' => array(
				'description' => 'Rating for an image.',
				'type' => 'int',
				'not null' => TRUE,
				'default' => 0,
			),
				'uid' => array(
				'description' => 'The foreign key for an user.',
				'type' => 'int',
				'not null' => TRUE,
				'default' => 0,
			),
		),
		'foreign keys' => array(
		  'images' => array(
			'table' => 'images',
			'columns' => array(
			  'imageid' => 'imageid',
			),
		  ),
		  'users' => array(
			'table' => 'users',
			'columns' => array(
			  'uid' => 'uid',
			),
		  ),
		),
		'primary key' => array(
			'ratingid',
		),
	);
	return $schema;
}

function LMACGallery_lmacDialogs() {
	return array(
		'lmacGalleryDownloadInfo' => array(
			'#type' => 'downloadboxwithindicator',
			'#title' => t('Download image'),
			'#message' => t('If using this image, please add @authorXY as 2% beneficiary to your Hive post. Also include the #lil tag to help our curators finding your post. Thank you!'),
			'#snippetdescription' => t('Please add this Markdown snippet to your Hive post to indicate where you got the image from.'),			
			'#snippet' => '[<center>![lil_image_preview.jpg](https://images.hive.blog/300x0/#downloadHref)<br/>Contributed to the #LIL by @authorXY.</center>](galleryImageUrl)',			
			'#linktitle' => t('Click to download'),
			'#href' => '#downloadHref', // Replacement marker
			'#urls' => array(
				'lmac_gallery',
				'lmac_gallery/*',
				'lmac_gallery-image/*'
			)
		)
	);
}

/**
 * Form callback for the search form.
 */
function LMACGallery_search_form($form, &$form_state){
 
    $form['page_welcome'] = array(
        '#type' => 'item',
        '#markup' => t('In this gallery you will find images that Hive users have diligently contributed to the LMAC Image Library.  Some images probably could not be read by the bot. If you can\'t find your images here, check the respective Hive posts for errors with the LIL Checker tool.'),
		'#prefix' => '<p>',
		'#suffix' => '</p>'
    );
	
    $form['sq'] = array(
        '#type' => 'textfield',
        '#title' => t('Search'),
        '#size' => 50,
        '#maxlength' => 200,
        '#required' => FALSE
    );
    
    $form['submit'] = array(
        '#type' 	=> 'button',
        '#value' 	=> t('Search')
    );
	
	$form['description'] = array(
		'#type' => 'item',
		'#description' => t('Enter one or more keywords you want to search for images. In example: car, clouds'),
 
	);
 
	$form['#rebuild'] = TRUE;
    
    return $form;
}
/**
 * Implements hook_FORM_alter for altering the search form.
 */
function LMACGallery_form_LMACGallery_search_form_alter(&$form, $form_state, $form_id)  {
	if ($form_id != 'LMACGallery_search_form') {
		return;
	}
	
	if (isset($_GET['q']) && (strpos($_GET['q'], 'lil-gallery/') === 0 || strpos($_GET['q'], 'lmac_gallery/') === 0)) {
		$keywordsFallback = explode('/', $_GET['q'])[1];
		if ($keywordsFallback == ALL_IMAGES_QUERY_STRING) {
			$keywordsFallback = '';	
		}
	}else{
		$keywordsFallback = '';
	}
	
	$form['sq']['#default_value'] = isset($_GET['sq']) ? $_GET['sq'] : $keywordsFallback;
  }
  
/**
 * Page callback
 *
 * @param $q
 *   Search query. Can be empty.
  * @param $pageNo
 *   Number of the page.
 *
 * @return
 *   The page content.
 */
function LMACGallery_page($q="", $pageNo=0) {

	$q = trim(check_plain($q));
	$q = preg_replace("/[^A-Za-z0-9\-, ]/", '', $q);
	if (empty($q)) {
		$q = ALL_IMAGES_QUERY_STRING;
	}
	$pageNo = intval($pageNo);
	
	drupal_add_js(drupal_get_path('module', 'LMACGallery').'/LMACGallery.js');
	drupal_add_css(drupal_get_path('module', 'LMACGallery').'/LMACGallery.css');
 
	$images = _LMACGallery_getImages(_LMACGallery_getSearchQueryFragments($q == ALL_IMAGES_QUERY_STRING ? '' : $q));
	$imagesAmount = count($images);
	if ($imagesAmount == 0) {
		drupal_set_message(t('No images could be found for the requested search terms.'), 'error');
		$chunks = [];
	}else{
	
		$chunks = array_chunk($images, MAX_IMAGES_PER_PAGE, TRUE);
		
		if ($pageNo < 0) {
			$pageNo = 0;
			drupal_set_message(t('Order denied! The execution of your order would damage the structure of space-time.'), 'error'); 
		}	
			
		if ($pageNo >= count($chunks)) {
			$pageNo = count($chunks) - 1;
			drupal_set_message(t('Oh wow, you just tried to see into the future.  Thank you for the confidence, but we can\'t execute your order for reasons of international security.'), 'error'); 
		}
	}	
	
	//$previousPageUrl = '/lil-gallery/' . $q . '/'. ($pageNo - 1);
	//$nextPageUrl = '/lil-gallery/' .  $q . '/'. ($pageNo + 1);
	//$firstPageUrl = '/lil-gallery/' . $q . '/0';
	//$lastPageUrl = '/lil-gallery/' . $q . '/' . (count($chunks) - 1);
   $pagination = _LMACGallery_renderPagination($q, $imagesAmount, $pageNo);
	
	return array(
		'searchForm' => drupal_get_form('LMACGallery_search_form'),
		'imageCounter' => array(
			'#type' =>'markup',
			'#markup' => t('@images images found.', array('@images'=>$imagesAmount)),
			'#prefix' => '<em>',
			'#suffix' => '</em>'
		),
		'gallery' => array(
			'#markup'=>count($chunks) > 0 ? theme('gallery_page', array('handPicked'=>variable_get('LMACGallery_curationPicks', array()),'images'=>$chunks[$pageNo], 'pagination'=>$pagination, 'pageNo'=>$pageNo, 'pagesTotal'=>count($chunks), /*'firstPageUrl'=>$firstPageUrl, 'lastPageUrl'=>$lastPageUrl, 'previousPageUrl'=>$previousPageUrl, 'nextPageUrl'=>$nextPageUrl,*/ 'imagesJson'=>_LMACGallery_createImagesJson($chunks[$pageNo]))) : t('No images found.')
		)
	);
}

/**
 * Generates an HTML paginator.
 *
 * @param $searchQuery
 *		The search query input
 * @param $imagesAmount
 *		The amount of all images matching to the search query.
 * @param $pageNo
 *		The number of the current page.
 * @return
 *   The cache Id.
 */
function _LMACGallery_renderPagination($searchQuery, $imagesAmount, $pageNo) {
   $pageNo = intval($pageNo) > 0 ? $pageNo : 1;
   $links = 5;


   $last       = ceil($imagesAmount / MAX_IMAGES_PER_PAGE) -1;

   $start      = ( ( $pageNo - $links ) > 0 ) ? $pageNo - $links : 1;
   $end        = ( ( $pageNo + $links ) < $last ) ? $pageNo + $links : $last;

   $html       = '<ul class="lmacg_paginationList">';

   $class      = ($pageNo == 1 ) ? "disabled" : "";
   if ($pageNo > 1) {
      $html       .= '<li class="' . $class . '"><a href="/lil-gallery/' . $searchQuery . '/' . ($pageNo - 1 ) . '">&laquo;</a></li>';
   }else{
      $html       .= '<li class="' . $class . '">&laquo;</li>';
   }

   if ( $start > 1 ) {
     $html   .= '<li><a href="/lil-gallery/' . $searchQuery . '/1">1</a></li>';
     $html   .= '<li class="disabled"><span>...</span></li>';
   }

   for ( $i = $start ; $i <= $end; $i++ ) {
     $class  = ($pageNo == $i ) ? "active" : "";
     $html   .= '<li class="' . $class . '"><a href="/lil-gallery/' . $searchQuery . '/' . $i . '">' . $i . '</a></li>';
   }

   if ( $end < $last ) {
     $html   .= '<li class="disabled"><span>...</span></li>';
     $html   .= '<li><a href="/lil-gallery/' . $searchQuery . '/'  . $last . '">' . $last . '</a></li>';
   }

   if ($pageNo >= $last) {
      $html .= '<li class="disabled">&raquo;</li>';
   }else{
      $html .= '<li><a href="/lil-gallery/' . $searchQuery . '/' . ($pageNo + 1) . '">&raquo;</a></li>';
   }

   $html .= '</ul>';

   return $html;
}


/**
 * Retrieves the cache Id for a specific search input.
 *
 * @param $searchInputFragments
 *		The search query input
 *
 * @return
 *   The cache Id.
 */
function _LMACGallery_getCacheId($searchInputFragments) {
 
	return 'LMACGallery_'.	str_replace(' ', '_', preg_replace('[^a-z0-9-_]', '', $searchInputFragments));
}

/**
 * Creates json from an array of image entities.
 *
 * @param $images
 *		The image array.
 *
 * @return
 *   Json code.
 */
function _LMACGallery_createImagesJson($images) {
	
	$imagesDict = [];
	
	foreach ($images as $image) {
		$imagesDict[$image['imageid']] = $image;
	}
	
	return drupal_json_encode($imagesDict);
}

/**
 * Retrieves images from the database due to a specific search input.
 *
 * @param $searchInputFragments
 *		The search query input. Example: dog cat animal
 *
 * @return
 *   An array of image entities.
 */
function _LMACGallery_getImages($searchInputFragments) {
	
	$imageUrlHideList = variable_get('LMACGallery_hideList', array());
	
	$cacheId = _LMACGallery_getCacheId($searchInputFragments); 
	$cache = cache_get($cacheId);
	$cachedSearchResults = [];
	if (! $cache) {
 
		$query = db_select("images", "li");
		$query->addField("li", "imageid");
		$query->addField("li", "title");
		$query->addField("li", "tags");
		$query->addField("li", "url");
		$query->addField("li", "permlink");
		$query->addField("li", "author");
		$query->addExpression('(SELECT AVG(score) FROM lmacg_ratings as lr WHERE lr.imageid=li.imageid)', 'ratingscore');
 
 
		if (! empty(trim($searchInputFragments))) {
			_LMACGallery_dbFetchImagesByTags($query, $searchInputFragments);
		}
	 
		$query->orderBy('ratingscore', 'DESC');

		$result = $query->execute();
			 
		while ($row = $result->fetchAssoc()) {
			
			if (in_array($row['url'], $imageUrlHideList)) {
				continue;
			}
			$row['cid'] = $cacheId;
			$row['thumbnailUrl'] = 'https://images.hive.blog/300x0/' . str_replace('https://images.hive.blog/0x0/"', '', $row['url']);			
			$row['truncatedTitle'] = (strlen($row['title']) > MAX_IMAGE_TITLE_LENGTH) ? substr($row['title'], 0, MAX_IMAGE_TITLE_LENGTH - strlen(TRUNCATE_DOTS)) . TRUNCATE_DOTS : $row['title'];
			$cachedSearchResults[] = $row;		  
		}
 
		
		cache_set($cacheId, $cachedSearchResults, 'cache', strtotime('+15 minute', time()));
	}else{
		$cachedSearchResults = $cache->data;
	}
 
	
 
	return $cachedSearchResults;
}

/**
 * Converts a search query string into a parsed array of search terms.
 *
 * @param $searchQuery
 *		The search query.
 *
 * @return
 *   An array of search terms.
 */
function _LMACGallery_getSearchQueryFragments($searchQuery, $wildcardMode = FALSE) {
 	
	$searchQuery = trim($searchQuery);
	
	$fragments = array_diff(explode(',', str_replace(array('(', ')', '"', "'", ',', '-', '+', ' ', '	'), ',', $searchQuery)), array(''));
	$safeFragments = [];

	if (count($fragments) > 6) {
		$fragments = array_slice($fragments, 0, 6);
	}

	foreach($fragments as $fragment) {
		if (strlen($fragment) < 3) {
			continue;
		}

		if (strlen($fragment) > 32) {
			$fragment = substr($fragment, 0, 32);
		}
		
		if ($wildcardMode) {
			$safeFragments[] = $fragment . 's';
		}

		$safeFragments[] = $fragment;
	}

	
	return implode(' ', $safeFragments);
}

/**
 * Adds a fulltext search to a DB query.
 *
 * @param $query
 *   A Drupal database query.
  * @param $urlSearchQuery
 *   The search query input. Example: dog cat animal
 *
 * @return
 *   Nothing
 */
function _LMACGallery_dbFetchImagesByTags($query, $urlSearchQuery) {
 
	if (! empty($urlSearchQuery) && strlen($urlSearchQuery) > 256) {
		$urlSearchQuery = substr($urlSearchQuery, 0, 256);
	}
 
	$expression = 'MATCH(li.tags, li.author) AGAINST (:search IN BOOLEAN MODE)';
	$query->where($expression, [':search' => _LMACGallery_getSearchQueryFragments($urlSearchQuery, TRUE)]);
}


/**
 * Implements hook_lmacadmin_statistics.
 */
function LMACGallery_lmacadmin_statistics() {
	
	module_load_include('inc', 'LMACGallery', 'LMACGallery.statistics');

	$imagesAmount = _LMACGallery_statistics_getAmountOfImages();
	$ratedAmount = _LMACGallery_statistics_getAmountOfRatedImages();
	$authorsAmount = _LMACGallery_statistics_getAmountOfAuthors();
	
	return array('title'=>t('LMAC Gallery'), 'dataRows'=>array(
			array('label'=>t('Amount of images'), 'data'=>$imagesAmount),
			array('label'=>t('Rated'), 'data'=>t(':op1 of :op2', array(':op1'=>$ratedAmount, ':op2'=>$imagesAmount))),
			array('label'=>t('Amount of authors'), 'data'=>$authorsAmount),
		)
	);
}

/**
 * Retrieves the image of a specific image id.
 * @param $imageID The database Id of the image.
 * @return The image on success. Otherwise FALSE.
 */
 function _LMACGallery_getImageById($imageId) {
	 
	 
		if (intval($imageId)== 0) {			
			return FALSE;			
		}
	 
		$query = db_select("images", "li");
		$query->addField("li", "imageid");
		$query->addField("li", "title");
		$query->addField("li", "tags");
		$query->addField("li", "url");
		$query->addField("li", "permlink");
		$query->addField("li", "author");
		$query->condition('imageid', $imageId);
		$query->range(0, 1);
		$result = $query->execute();
		$image = $result->fetchAssoc();
		
		if ($image != FALSE) {
			$image['hiveLink'] = '@' . $image['author'] . '/' . $image['permlink'];
		}
		
		return $image;
 }		
 
/**
 * The page callback of the image page.
 */
 function LMACGallery_imagePage($imageId) {
	 
	$image = _LMACGallery_getImageById($imageId);
	if (! $image) {
		drupal_not_found();
		return;
	}
	
	drupal_set_title(t('Image by @!author', array('!author'=>$image['author'])));
	drupal_add_css(drupal_get_path('module', 'LMACGallery').'/LMACGallery.css');
	drupal_add_js(drupal_get_path('module', 'LMACGallery').'/LMACGallery.image.js');
	drupal_add_js(array('LMACGalleryImage' => $image), array('type' => 'setting'));
	
	return array(
		'#type' => 'markup',
		'#markup' => theme('gallery_image_page', array('image'=>$image))
	);
 }
 
