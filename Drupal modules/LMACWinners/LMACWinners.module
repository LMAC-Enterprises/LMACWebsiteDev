<?php
/*
 * Implements hook_menu().
**/
function LMACWinners_menu() {
	
	$items = array();
	
	$items['lmac-winners'] = array(
		'title' 			      => t('LMAC Winners'),
		'description'        => t('Overview of all LMAC Winners'), 
		'page callback' 	   => 'LMACWinners_winnersPage',
		'page arguments' 	   => array(),
		'access arguments' 	=> array('view lmac_contest'),
	);	
	$items['lmac-winners/%'] = array(
		'page callback' 	   => 'LMACWinners_winnersPage',
		'page arguments' 	   => array(1),
		'access arguments' 	=> array('view lmac_contest'),
	);	

	$items['admin/lmac/lmac-winners/%'] = array(
		'page callback' 	   => 'drupal_get_form',
		'page arguments' 	   => array('LMACWinners_editRound_form', 3),
		'access arguments' 	=> array('administer lmac_contest'),
      'file'               => 'LMACWinners.admin.inc'
	);	

	$items['admin/lmac/lmac-winners/new'] = array(
		'title' 			      => t('Add a new contest'),
		'description'        => t('Provides a form to add a new contest to the winners gallery.'), 
		'page callback' 	   => 'drupal_get_form',
		'page arguments' 	   => array('LMACWinners_editRound_form', 3),
		'access arguments' 	=> array('administer lmac_contest'),
      'file'               => 'LMACWinners.admin.inc'
	);	
		
	return $items;
}

/**
 * Implements hook_permission().
 */
function LMACWinners_permission() {
  return array(
    'administer lmac_contest' => array(
      'title' => t('Administer LMAC contests'),
    ),
	'view lmac_contest' => array(
      'title' => t('View LMAC contests'),
    ),
  );
}


/**
 * Implements hook_schema().
 */
function LMACWinners_schema() {
	$schema = [];
	
	$schema['lmac_contests'] = array(
		'description' => 'Table to keep LMAC rounds.',

		'fields' => array(
			'contestId' => array(
				'description' => 'The primary identifier for a LMAC round entry. The round number.',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'title' => array(
				'description' => 'The title of the winners post.',
				'type' => 'varchar',
				'length' => 512,
				'not null' => TRUE,
				'default' => '',
			),
			'postUrl' => array(
				'description' => 'Post Url',
				'type' => 'varchar',
				'length' => 512,
				'not null' => TRUE,
				'default' => '',
			),
			'templateImageUrl' => array(
				'description' => 'Template Image Url.',
				'type' => 'varchar',
				'length' => 512,
				'not null' => TRUE,
				'default' => '',
			),
			'winners' => array(
				'description' => 'Winners json array',
				'type' => 'text',
			),
		),
		'primary key' => array(
			'contestId',
		),
	);
	
	return $schema;
}

/**
 * Implements hook_theme()
 */
function LMACWinners_theme() {
 
	$themes = array();
	$themes['LMACWinners_page'] = array(
		'template' => 'LMACWinners-page',
		'path' => drupal_get_path('module', 'LMACWinners'),
	);
    return $themes;
}

/*
 * The form callback of the search form. CURRENTLY NOT YET IN USE!!!
**/
function LMACWinners_winnersPage_search_form($form, &$form_state) {

	$form['contest-round'] = array(
	   '#type' => 'select',
	   '#title' => t('Choose a contest'),
	   '#options' => _LMACWinners_getContestOptions(),
	   '#default_value' => 0,
	);

	return $form;
}

/*
 * Retrieves an array of contests for use in a HTML selector.
 * @return An array of contests.
**/
function _LMACWinners_getContestOptions() {
	
	$options = [];
	
	$query = db_select("lmac_contests", "lr");
	$query->addField("lr", "contestId");
	$query->orderBy("contestId", 'DESC');
	
	$result = $query->execute();
	while ($row = $result->fetchAssoc()) {
		
		$options[$row['contestId']] = t('LMAC #!round', array('!round' => $row['contestId']));
	}
	
	return $options;
}

/*
 * The page view callback of the winners page.
 * @param $round The contest Id (round number).
**/
function LMACWinners_winnersPage($round = -1) {

	$contest = _LMACWinners_getContest($round);
	if ($contest == NULL) {
		drupal_not_found();
		return;
	}
	
	drupal_add_css(drupal_get_path('module', 'LMACWinners') . '/simpleGallery/simpleGallery.css');
	drupal_add_css(drupal_get_path('module', 'LMACWinners') . '/LMACWinners.css');
	drupal_add_js(drupal_get_path('module', 'LMACWinners') . '/LMACWinners.js');
	drupal_add_js(drupal_get_path('module', 'LMACWinners') . '/simpleGallery/jquery.simpleGallery.js');
	
	$links = [];
 
	$links['pollLinks'] = _LMACWinners_renderDappLinks(_LMACWinners_getDappLinks('https://peakd.com/' . $contest->postUrl));
	
 
	return array(
		'page' => array(
			'#type' => 'markup',
			'#markup' => theme('LMACWinners_page', array('contest'=>$contest, 'links'=>$links, 'navigation' => _LMACWinners_getNavigationUrls($contest->contestId)))
		)
	);
}

/*
 * Retrieves navigation urls for the pagination on the winners page.
 * @param $round The contest Id (round number).
 * @return An array of navigation urls.
**/
function _LMACWinners_getNavigationUrls($round) {
	$navigationData = db_query('SELECT contestId, (SELECT contestId FROM {lmac_contests} AS prev WHERE prev.contestId<lr.contestId ORDER BY prev.contestId DESC LIMIT 1) as previousroundid, (SELECT contestId FROM {lmac_contests} as nxt WHERE nxt.contestId>lr.contestId ORDER BY nxt.contestId ASC LIMIT 1) as nextroundid FROM {lmac_contests} AS lr WHERE lr.contestId=:currentRound LIMIT 1', array('currentRound' => (int)$round))
	->fetchObject();
	 
	return array(
		'previousRound' => isset($navigationData->previousroundid) ? '/lmac-winners/' . $navigationData->previousroundid : NULL,
		'nextRound' => isset($navigationData->nextroundid) ? '/lmac-winners/' . $navigationData->nextroundid : NULL,
	);
}

/*
 * Retrieves a contest object from the database.
 * @param $round The contest Id (round number).
 * @return The contest object.
**/
function _LMACWinners_getContest($round) {
 
	if ($round < 0 || empty($round)) {
		$contest = db_query('SELECT * FROM {lmac_contests} ORDER BY contestId DESC LIMIT 1')
		->fetchObject();
	}else{
		$contest = db_query('SELECT * FROM {lmac_contests} WHERE contestId = :id LIMIT 1', array(':id' => $round))
		->fetchObject();
	}
	if (! $contest) {
		return NULL;
	}
	
	if (! empty($contest->templateImageUrl)) {
		$contest->templateThumbnailUrl = 'https://images.hive.blog/300x0/' . str_replace('https://images.hive.blog/0x0/', '', $contest->templateImageUrl);
	}
	
   $winners = json_decode($contest->winners, True);
   usort($winners, "_LMACWinners_sortWinnersArray");
 
	$contest->winners = [];

	foreach($winners as $winner) {
		
		$winner['dappyfiedPostUrls'] = _LMACWinners_getDappLinks($winner['postUrl']);
		$winner['placeText'] = _LMACWinners_getContestPlaceTextColumn($winner['winningPlace']);
		$winner['imageThumbnailUrl'] = 'https://images.hive.blog/300x0/' . str_replace('https://images.hive.blog/0x0/', '', $winner['imageUrl']);
		$contest->winners[] = $winner;
	}

   $contest->groupedWinners = _LMACWinners_splitWinnersIntoTopGroups($contest->winners);
		
	return $contest;
}
/*
 * A sort callback for the PHP sort function that sorts winners by winning places.
**/
function _LMACWinners_sortWinnersArray($a, $b) {
    if ($a['winningPlace'] == $b['winningPlace']) {
        return 0;
    }

    return ($a['winningPlace'] < $b['winningPlace']) ? -1 : 1;
}

/*
 * Retrieves a human readable text for a place number.
 * @param $place A winning place number.
 * @return The winning place text.
**/
function _LMACWinners_getContestPlaceTextColumn($place) {
	$place = (int)$place;
	if ($place >= 1 && $place <= 5) {
      return t('Place !place', array('!place' => $place));
   }
   if ($place > 5 && $place <=10) {
      return t('Top 10');
   }

   return t('Top 15');
}
 
function _LMACWinners_getDappHosts() {
	
	return array(
		'peakd' => 'peakd.com',
		'hive-blog' => 'hive.blog',
		'ecency' => 'ecency.com'
	);
}

/*
 * A backward compatible "startsWith" string function.
**/
function _LMACWinners_startsWith($string, $startString)
{
    $len = strlen($startString);
    return (substr($string, 0, $len) === $startString);
}

/*
 * Retieves an array of Dapp links for an Hive url.
 * @param $url A Hive url.
 * @return An array of Dapp url links.
**/
function _LMACWinners_getDappLinks($url) {
	
	$urlSegments = parse_url($url);
	$links = [];
	foreach (_LMACWinners_getDappHosts() as $hostKey => $host) {
		$scheme   = isset($urlSegments['scheme']) ? $urlSegments['scheme'] . '://' : '';
		$port     = isset($urlSegments['port']) ? ':' . $urlSegments['port'] : '';
		$user     = isset($urlSegments['user']) ? $urlSegments['user'] : '';
		$path     = isset($urlSegments['path']) ? $urlSegments['path'] : '';
		$query    = isset($urlSegments['query']) ? '?' . $urlSegments['query'] : '';
		$fragment = isset($urlSegments['fragment']) ? '#' . $urlSegments['fragment'] : '';
		
		$link = "$scheme$user$host$port$path$query$fragment";
		if (! _LMACWinners_startsWith($link, 'https://')) {
			if (_LMACWinners_startsWith($link, '/')) {
				$link = substr($link, 1);
			}
			$link = 'https://' . $link;
		}
		
		$links[$hostKey] = $link;

	}
 
	
	return $links;
}

function _LMACWinners_renderDappLinks($dappUrls) {
	
	$links = [];
	
	foreach ($dappUrls as $dappKey=>$dappUrl) {
		
		$links['item-' . $dappKey] = array('title' => ' ', 'href' => $dappUrl, 'attributes' => array('target'=>'_blank', 'class'=>array('lmac-winner-dapp-link',  $dappKey . '-dapp-icon')));
	}

	return theme('links', array(
	  'links' => $links,
	  'attributes' => array('class' => array('lmac-contest-title-links')),
	));
}
 
function _LMACWinners_splitWinnersIntoTopGroups($winners) {
   $groups = [5=>[], 10=>[], 15=>[]];

   foreach($winners as $winner) {

      $winnerObject = (object)$winner;

      if ($winnerObject->winningPlace <= 5) {
         $groups[5][] = $winner;
         continue;
      }
      if ($winnerObject->winningPlace > 5 && $winnerObject->winningPlace <= 10) {
         $groups[10][] = $winner;
         continue;
      }
      $groups[15][] = $winner;
   }
 
   return $groups;
}

